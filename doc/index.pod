
=head1 Zilberman Lab Tools

The Zilberman Lab's perl scripts.

This page contains everything you need to know to get the Zilberman Lab scripts running on your computer.  

=head2 L<Download|http://dzlab.pmb.berkeley.edu/tools/archive>

=head2 L<Online manual pages|scripts.pod>

=head2 L<work|http://dzlab.pmb.berkeley.edu:8080/work>

=over

=item L<annotations|http://dzlab.pmb.berkeley.edu:8080/work/annotations>

=item L<genomes|http://dzlab.pmb.berkeley.edu:8080/work/genomes>

=back

=head2 Installing DZ-Perl and DZLab-Tools

You need to install packages in order to get the scripts running on your computer: DZ-Perl and DZLab-Tools.  DZ-Perl is
a customized version of Perl.  DZLab-Tools contains the actual scripts.  

Both DZ-Perl and DZLab-Tools are available from L<http://dzlab.pmb.berkeley.edu/tools/archive>.  Simply download the
most recent version of each, for example dzlab-tools-0.0.6.exe and dz-perl-1.2.exe, and double click each to install.
The order of installation does not (or at least shouldn't) matter.

The packages are installed to c:\dzlab-tools and c:\dz-perl, though you shouldn't need to know that.

=head2 Upgrading

Simply grab the latest version of DZLab-Tools (and DZ-Perl, if there's a newer version of that as well) from
L<http://dzlab.pmb.berkeley.edu/tools/archive> and double click the installer.  The older version will be automatically
uninstalled.  (Note: You can also downgrade by installing an older version.)

=head2 Launching the command line

The command line can be launched from the Start Menu, via Start Menu->All Programs->Zilberman Lab->DZLab Command Line.
From this command line, you should be able launch all scripts installed in c:\dzlab-tools directly (without 'perl -S'),
from any directory.  Be sure to check out the new console windows settings (Edit->Settings) to adjust font sizes/etc.  

=head2 On Linux

Install Git.  For most distributions, git is available via the package manager.  For ubuntu:

 sudo apt-get install git-core 

If your distro doesn't provide git, you can compile from source by grabbing the
source L<here|http://git-scm.com>. Note that, in order to clone an HTTP git
repository, you need the development files for curl installed.  This is usually
named libcurl-dev or similar in the package repository.

Install bowtie by downloading from bowtie-bio.sourceforge.net, extracting the
directory and running 'make'.

Checkout the dzlab-tools bundle:

 git clone http://dzlab.pmb.berkeley.edu/tools/dzlab-tools.git

Make sure to set the PATH variable correctly by pointing it to the directories
with dzlab-tools and bowtie.  On bash (default on ubuntu and most linux
distros), put this in your ~/.profile or ~/.bash_profile:

 export PATH=/path/to/dzlab-tools:/path/to/bowtie:$PATH

You may have to log out and back in to see the effects of this. 

=head2 ChangeLog

=over

=item 1.1.8 (2011-07-18)

=over 2

=item * L<ends_analysis_batch.pl> allows running ends analysis in bulk according to config files.

=back

=item 1.1.7 (2011-07-18)

=over 2

=item * L<bs-sequel.pl> produces single-c files concatenated by context (as well as the usual chromosome specific ones).

=item * L<fisher_exact_test.pl> can accept arbitrary thresholds, and also do 'real' calculations without logarithmic 
approximations

=item * L<bs-sequel.pl> and L<bastard_imprinting.pl> creates a separate log file for bowtie, so you don't have to go looking for it.

=item * Added L<bulk-gunzip> script to unzip new CASAVA formatted split-.gz files that we're getting from Leath.

=item * L<window_by_fixed.pl> now can handle non-single-c files (like evenly
spaced windows)--- BUT it still cannot handle overlapping input files. 

=back

=item 1.1.0 (2011-06-14)

First release with the new L<single_c_mashup.pl> script. 

=item 1.0.0 (2011-06-10)

First release with the new L<bs-sequel.pl> script. 

=back

=cut

=head2 Required Perl Modules

The following Perl modules are required and all installable from
L<cpan|http://www.cpan.org>: Config::General, DBI, Devel::Size, Getopt::Euclid,
Getopt::Long::Descriptive, LWP::Simple, List::MoreUtils, Log::Log4perl, Moose,
Moose::Role, PPI, Parallel::ForkManager, Regexp::Common,
Statistics::Descriptive, Test::Exception, Tree::Range, URI::Escape,
XML::Simple, XML::Twig

=cut
