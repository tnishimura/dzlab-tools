#!/usr/bin/env perl
use strict;
use warnings FATAL => "all";
use 5.010_000;
use Data::Dumper;
use autodie;
use Pod::Usage;
use Getopt::Long;
use FindBin;
use lib "$FindBin::Bin/lib";
use FastaReader;

END {close STDOUT}
$| = 1;

use File::Basename qw/basename/;
$0 = basename $0;

sub usage{
    print <<"END";
usage:

Get the lengths of chromosomes in fasta file:

  $0 lengths data.fasta               
  $0 lengths --gff data.fasta # in gff format
  $0 len data.fasta           # "lengths" can be abbrev'd to "len" or even "l"

Get a subsection of the fasta file:

  $0 get --sequence chr1 data.fasta      # output chr1 from data.fasta
  $0 get -s chr1 -r 21 30 data.fasta     # output chr1 base 21 to 30 
  $0 get -s chr1 -r 21 30 -rc data.fasta # output chr1 base 21 to 30 rc'd

Get single-nucleotide base-composition (bc) of fasta file:

  $0 base-composition data.fasta  
  $0 bc data.fasta               # short form
END

    exit 1;
}

my $cmd = shift;

given ($cmd){
    when ([qw/lengths length len l/]){
        use Pod::Usage;
        use Getopt::Long;
        
        my $result = GetOptions (
            "gff|g" => \(my $gff),
        );
        usage() if (!$result);

        my $fasta = shift || usage();
        my $r = FastaReader->new(file => $fasta, slurp => 0);

        my %lengths = $r->sequence_lengths;

        my $total = 0;
        for (sort keys %lengths){
            if ($gff){
                say join "\t", $_, '.', 'chromosome', 1, $lengths{$_}, qw/. . ./, "Name=$_";
            }
            else{
                say "$_:\t" . $lengths{$_};
            }
            $total += $lengths{$_};
        }
        if (! $gff){
            say "total:\t" . $total; 
        }
    }
    when ([qw/base-composition bc/]){
        my $fasta = shift || usage();
        my $r = FastaReader->new(file => $fasta, slurp => 0);
        say $r->base_composition_table();
    }
    when ([qw/get/]){
        my @range;
        my $result = GetOptions (
            "sequence|seq=s" => \(my $sequence),
            "range|r=i{2}"   => \@range,
            "coordinate|c=s" => \(my $coordinate = 'f'),
            "base|b=i"       => \(my $base = 1),
            "reverse-complement|rc" => \(my $reverse_complement),
        );
        usage() if (
            !$result || 
            ! $sequence || 
            (@range != 0 && @range != 2) ||
            ($coordinate ne 'f' && $coordinate ne 'r') ||
            ($base != 0 && $base != 1)
        );  

        my $fasta = shift || usage();
        my $r = FastaReader->new(file => $fasta, slurp => 0);

        if (0 == @range){
            print $r->get_pretty(
                $sequence, 
                $sequence, 
                undef, 
                undef, 
                rc    => $reverse_complement
            );
        }
        else{
            print $r->get_pretty(
                "$sequence\_$range[0]\_$range[1]", 
                $sequence, @range,
                coord => $coordinate,
                rc    => $reverse_complement,
                base  => $base
            );
        }
    }
    default{
        usage();
    }
}
